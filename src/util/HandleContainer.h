/*
 * Copyright 2022 Arx Libertatis Team (see the AUTHORS file)
 *
 * This file is part of Arx Libertatis.
 *
 * Original source is copyright 2002 Robert Ramey
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef ARX_UTIL_HANDLECONTAINER_H
#define ARX_UTIL_HANDLECONTAINER_H

#include <stddef.h>
#include <array>
#include <vector>
#include <type_traits>

#include "util/Range.h"
#include "platform/Platform.h"


namespace util {

template <typename Handle, typename Base>
class HandeContainer : public Base {
	
public:
	
	using Base::Base;
	using Base::size;
	
	[[nodiscard]] auto handles() const noexcept {
		arx_assume(size() <= size_t(Handle::max()));
		return util::transform(util::indices(*this), [](size_t i) noexcept { return Handle(i); });
	}
	
	[[nodiscard]] decltype(auto) operator[](Handle handle) noexcept {
		arx_assume(handle && size_t(handle) < size());
		return Base::operator[](size_t(handle));
	}
	
	[[nodiscard]] decltype(auto) operator[](Handle handle) const noexcept {
		arx_assume(handle && size_t(handle) < size());
		return Base::operator[](size_t(handle));
	}
	
};

template <typename Handle, typename T>
using HandleVector = HandeContainer<Handle, std::vector<T>>;

template <typename Handle, typename T, size_t Size>
using HandleArray = HandeContainer<Handle, std::array<T, Size>>;

} // namespace util

#endif // ARX_UTIL_HANDLECONTAINER_H
